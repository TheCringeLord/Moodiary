plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'      
    id 'dev.flutter.flutter-gradle-plugin'
}

import java.util.Properties
import java.io.FileInputStream

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace 'com.example.moodiary'
    compileSdk flutter.compileSdkVersion
    ndkVersion '27.0.12077973'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    // ← Your APK-renaming logic
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                def newName = "MyMoodiary-${variant.versionName}.apk"
                output.outputFileName = newName
            }
        }
    }

    defaultConfig {
        applicationId "com.example.moodiary"
        minSdkVersion 23
        targetSdk flutter.targetSdkVersion
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // debug signing (optional)
        }
    }
}

flutter {
    source '../..'
}
apply plugin: 'com.google.gms.google-services'